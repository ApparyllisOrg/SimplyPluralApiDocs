openapi: '3.0.2'
info:
  title: Simply Plural API
  description: This is a work-in-progress API definition. If you need to know specifics, please go to https://github.com/ApparyllisOrg/SimplyPluralApi/blob/main/src/api/v1/routes.ts
  version: '1.0'
servers:
  - url: https://api.apparyllis.com:8443
  - url: https://devapi.apparyllis.com

paths:
  /v1/members/{systemId}:
    get:
      summary: 'Get All Members'
      description: 'Get members from a system by system id. This can be the system of the authenticated user, or from a friend of the authenticated user.'
      security:
        - APITokenAuth: []
      tags:
        - Members
      parameters:
        - in: path
          name: systemId
          schema:
            type: string
          required: true
          description: String Id of the system (12 byte BSON ObjectId as string)
      responses:
        '200':
          description: 'OK - Will return empty array if no members exist or no members are visible to you'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    exists:
                      type: boolean
                    id:
                      type: string
                      description: Unique id for this member (12 byte BSON ObjectId as string)
                    content:
                      allOf:  # combine MemberModel with inline model shown below; result: extended MemberModel with immutable `uid` added by response
                        - $ref: '#/components/schemas/MemberModel'
                        - type: object
                          properties:
                            uid:
                              type: string
                              description: uid of the system this member belongs to (12 byte BSON ObjectId as string)
        '403':
          description: 'FORBIDDEN - Not authorised to view members of this user'
        '404':
          description: 'NOT FOUND - System not found'

  /v1/member/{systemId}/{entityId}:
    get:
      summary: 'Get Member'
      description: 'Get a member from a system by unique Ids of both system and member. This can be the system of the authenticated user, or from a friend of the authenticated user.'
      security:
        - APITokenAuth: []
      tags:
        - Members
      parameters:
        - in: path
          name: systemId
          schema:
            type: string
          required: true
          description: String Id of the system (12 byte BSON ObjectId as string)
        - in: path
          name: entityId
          schema:
            type: string
          required: true
          description: String Id of the member (12 byte BSON ObjectId as string)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  exists:
                    type: boolean
                  id:
                    type: string
                    description: Unique Id for this member (12 byte BSON ObjectId as string)
                  content:
                    allOf:  # combine MemberModel with inline model shown below; result: extended MemberModel with immutable `uid` added by response
                      - $ref: '#/components/schemas/MemberModel'
                      - type: object
                        properties:
                          uid:
                            type: string
                            description: uid of the system this member belongs to (12 byte BSON ObjectId as string)
        '401':
          description: UNAUTHORISED - You don't have permissions to view this  # TODO: Fix this on API, #69
        '404':
          description: NOT FOUND  # TODO: fix this on API, #69
          
  /v1/member/{entityId}:
    post:
      summary: 'Add Member'
      description: 'Add a member by (optionally) an Id'
      security:
        - APITokenAuth: []
      parameters:
        - in: path
          name: entityId
          schema:
            type: string
          required: false
          description: String Id of the member (12 byte BSON ObjectId as string)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberModel'
      tags:
        - Members
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                description: String Id of the newly added member (12 byte BSON ObjectId as string)
        '400':
          description: BAD REQUEST - Validation of request body failed
        '500':  
          description: SERVER ERROR - Adding member failed
    
    patch:
      summary: 'Update Member'
      description: 'Update a member by Id'
      security:
        - APITokenAuth: []
      parameters:
        - in: path
          name: entityId
          schema:
            type: string
          required: true
          description: String Id of the member (12 byte BSON ObjectId as string)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberModel'
      responses:
        '200':
          description: OK - Empty response body
        '400':
          description: BAD REQUEST - Validation of request body failed
        '404':
          description: NOT FOUND  # TODO: fix this on API, #69
      tags:
        - Members

    delete:
      summary: 'Delete Member'
      description: 'Delete a member by Id'
      security:
        - APITokenAuth: []
      parameters:
        - in: path
          name: entityId
          schema:
            type: string
          required: true
          description: String Id of the member (12 byte BSON ObjectId as string)
      responses:
        '200':
          description: OK - Empty response body
        '404':
          description: NOT FOUND - Empty response body
      tags:
        - Members


  /v1/group/{systemId}/{entityId}:
    get:
      summary: 'Get a group'
      description: 'Get a group by Id'
      parameters:
        - in: path
          name: systemId
          schema:
            type: string
          required: true
          description: String Id of the system (12 byte BSON ObjectId as string)
        - in: path
          name: groupId
          schema:
            type: string
          required: true
          description: String Id of the group (12 byte BSON ObjectId as string)
      tags:
        - Groups
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
  /v1/group/{entityId}:
    post:
      summary: 'Add a group'
      description: 'Add a group by (optionally) an Id'
      parameters:
        - in: path
          name: entityId
          schema:
            type: string
          required: false
          description: String Id of the member
      tags:
        - Groups
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
    patch:
      summary: 'Update a group'
      description: 'Update a group by Id'
      parameters:
        - in: path
          name: entityId
          schema:
            type: string
          required: true
          description: String Id of the member
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
      tags:
        - Groups
    delete:
      summary: 'Delete a group'
      description: 'Delete a group by Id'
      parameters:
        - in: path
          name: entityId
          schema:
            type: string
          required: true
          description: String Id of the member
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
      tags:
        - Groups
  /v1/groups/{systemId}:
    get:
      summary: 'Get all groups'
      description: 'Get groups of a system by Id'
      tags:
        - Groups
      parameters:
        - in: path
          name: systemId
          schema:
            type: string
          required: true
          description: String Id of the system
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND

  /v1/note/{systemId}/{entityId}:
    get:
      summary: 'Get Note'
      description: 'Get a note by system and Id'  # TODO: verify if systemId is just for consistency
      tags:
        - Notes
      parameters:
        - in: path
          name: entityId
          schema:
            type: string
          required: true
          description: String Id of the note
        - in: path
          name: systemId
          schema:
            type: string
          required: true
          description: String Id of the system
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
  /v1/note/{entityId}:
    post:
      summary: 'Add a note'
      description: 'Add a note by (optionally) an Id'
      parameters:
        - in: path
          name: entityId
          schema:
            type: string
          required: false
          description: String Id of the note
      tags:
        - Notes
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
    patch:
      summary: 'Update a note'
      description: 'Update a note by Id'
      parameters:
        - in: path
          name: entityId
          schema:
            type: string
          required: true
          description: String Id of the note
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
      tags:
        - Notes
    delete:
      summary: 'Delete a note'
      description: 'Delete a note by Id'
      parameters:
        - in: path
          name: entityId
          schema:
            type: string
          required: true
          description: String Id of the note
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
      tags:
        - Notes
  /v1/notes/{systemId}/{entityId}:
    get:
      summary: 'Get all notes'
      description: 'Get all notes of a member from a system by Id'  # TODO: verify if systemId is just for consistency
      tags:
        - Notes
      parameters:
        - in: path
          name: systemId
          schema:
            type: string
          required: true
          description: String Id of the system
        - in: path
          name: entityId
          schema:
            type: string
          required: true
          description: String Id of the member whose notes are requested
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND


  /v1/customFront/{systemId}/{entityId}:
    parameters:
      - in: path
        name: entityId
        schema:
          type: string
        required: true
        description: String Id of the Custom Front
      - in: path
        name: systemId
        schema:
          type: string
        required: true
        description: String Id of the system
    get:
      summary: 'Get a Custom Front'
      description: 'Get a Custom Front by Id'
      tags:
        - Custom Fronts
      parameters:
        - in: path
          name: entityId
          schema:
            type: string
          required: true
          description: String Id of the Custom Front
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
  /v1/customFront/{entityId}:
    post:
      summary: 'Add a Custom Front'
      description: 'Add a Custom Front by (optionally) an Id'
      parameters:
        - in: path
          name: entityId
          schema:
            type: string
          required: false
          description: String Id of the Custom Front
      tags:
        - Custom Fronts
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
    patch:
      summary: 'Update a Custom Front'
      description: 'Update a Custom Front by Id'
      parameters:
        - in: path
          name: entityId
          schema:
            type: string
          required: true
          description: String Id of the Custom Front
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
      tags:
        - Custom Fronts
    delete:
      summary: 'Delete a Custom Front'
      description: 'Delete a Custom Front by Id'
      parameters:
        - in: path
          name: entityId
          schema:
            type: string
          required: true
          description: String Id of the member
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
      tags:
        - Custom Fronts
  /v1/customFronts/{systemId}:
    get:
      summary: 'Get Custom Fronts'
      description: 'Get custom fronts of a system by Id'
      tags:
        - Custom Fronts
      parameters:
        - in: path
          name: systemId
          schema:
            type: string
          required: true
          description: String Id of the system
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND

  /v1/comments/{type}/{entityId}:
    get:
      summary: 'Get comments from an entity by type'
      description: 'Get comments from a document of type (groups, members, customFronts, etc.)'
      tags:
        - Comments
      parameters:
        - in: path
          name: entityId
          schema:
            type: string
          required: true
          description: String Id of the document you wish to get comments from
        - in: path
          name: type
          schema:
            type: string
          required: true
          description: Type of the comment (groups, members, customFronts, etc.)  # TODO: check what valid types are, and add it as oneOf schema instead. "frontHistory" is one, what others are there?
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
  /v1/comment/{entityId}:
    post:
      summary: 'Add a comment'
      description: 'Add a Comment by (optionally) an Id'
      parameters:
        - in: path
          name: entityId
          schema:
            type: string
          required: false
          description: String Id of the Comment
      tags:
        - Comments
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
    patch:
      summary: 'Update a Comment'
      description: 'Update a Comment by Id'
      parameters:
        - in: path
          name: entityId
          schema:
            type: string
          required: true
          description: String Id of the Comment
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
      tags:
        - Comments
    delete:
      summary: 'Delete a comment'
      description: 'Delete a Comment by Id'
      parameters:
        - in: path
          name: entityId
          schema:
            type: string
          required: true
          description: String Id of the Comment
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
      tags:
        - Comments
  /v1/comment/{systemId}/{entityId}:
    get:
      summary: 'Get a comment'
      description: 'Get a specific comment from a system'  # TODO: verify if systemId is just for consistency, as comments are always private.
      tags:
        - Comments
      parameters:
        - in: path
          name: systemId
          schema:
            type: string
          required: true
          description: String Id of the system
        - in: path
          name: entityId
          schema:
            type: string
          required: true
          description: String id of the Comment document
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND


  /v1/poll/{systemId}/{entityId}:
    get:
      summary: 'Get a Poll'
      description: 'Get a Poll by id'  # TODO: verify if systemId is just for consistency
      tags:
        - Polls
      parameters:
        - in: path
          name: entityId
          schema:
            type: string
          required: true
          description: String Id of the Poll
        - in: path
          name: systemId
          schema:
            type: string
          required: true
          description: String Id of the system
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
  /v1/poll/{entityId}:
    post:
      summary: 'Add a Poll'
      description: 'Add a Poll by (optionally) an Id'
      parameters:
        - in: path
          name: entityId
          schema:
            type: string
          required: false
          description: String Id of the Poll
      tags:
        - Polls
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
    patch:
      summary: 'Update a Poll'
      description: 'Update a Poll by Id'
      parameters:
        - in: path
          name: entityId
          schema:
            type: string
          required: true
          description: String Id of the Poll
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
      tags:
        - Polls
    delete:
      summary: 'Delete a Poll'
      description: 'Delete a Poll by Id'
      parameters:
        - in: path
          name: entityId
          schema:
            type: string
          required: true
          description: String Id of the Comment  # TODO: check what collection it corresponds to, likely not comment.
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
      tags:
        - Polls
  /v1/polls/{systemId}:
    get:
      summary: 'Get all polls'
      description: 'Get polls from a system'  # TODO: verify if systemId is just for consistency
      tags:
        - Polls
      parameters:
        - in: path
          name: systemId
          schema:
            type: string
          required: true
          description: String Id of the system
        - in: path
          name: entityId
          schema:
            type: string
          required: true
          description: String id of the Comment document  # TODO: check what collection is used, likely not the comment document but something else.
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND

  /v1/timer/automated/{systemId}/{entityId}:
    get:
      summary: 'Get an Automated Timer'
      description: 'Get an Automated Timer by id'  # TODO: verify if systemId is just for consistency
      tags:
        - Automated Timers
      parameters:
        - in: path
          name: entityId
          schema:
            type: string
          required: true
          description: String Id of the Automated Timer
        - in: path
          name: systemId
          schema:
            type: string
          required: true
          description: String Id of the system
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
  /v1/timer/automated/{entityId}:
    post:
      summary: 'Add an Automated Timer'
      description: 'Add an Automated Timer by (optionally) an Id'
      parameters:
        - in: path
          name: entityId
          schema:
            type: string
          required: false
          description: String Id of the Automated Timer
      tags:
        - Automated Timers
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
    patch:
      summary: 'Update an Automated Timer'
      description: 'Update an Automated Timer by Id'
      parameters:
        - in: path
          name: entityId
          schema:
            type: string
          required: true
          description: String Id of the Automated Timer
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
      tags:
        - Automated Timers
    delete:
      summary: 'Delete an Automated Timer'
      description: 'Delete an Automated Timer by Id'
      parameters:
        - in: path
          name: entityId
          schema:
            type: string
          required: true
          description: String Id of the timer
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
      tags:
        - Automated Timers

  /v1/timers/automated/{systemId}:
    get:
      summary: 'Get all Automated Timers'
      description: 'Get Automated Timers from a system'  # TODO: verify if systemId is just for consistency
      tags:
        - Automated Timers
      parameters:
        - in: path
          name: systemId
          schema:
            type: string
          required: true
          description: String Id of the system
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND

  /v1/timer/repeated/{systemId}/{entityId}:
    get:
      summary: 'Get a Repeated Timer'
      description: 'Get a Repeated Timer by id of a specific system'  # TODO verify if systemId is just for consistency
      tags:
        - Repeated Timers
      parameters:
        - in: path
          name: entityId
          schema:
            type: string
          required: true
          description: String Id of the Repeated Timer
        - in: path
          name: systemId
          schema:
            type: string
          required: true
          description: String Id of the system
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
  /v1/timer/repeated/{entityId}:
    post:
      summary: 'Add a Repeated Timer'
      description: 'Add a Repeated Timer by (optionally) an Id'
      parameters:
        - in: path
          name: entityId
          schema:
            type: string
          required: false
          description: String Id of the Repeated Timer
      tags:
        - Repeated Timers
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
    patch:
      summary: 'Update a Repeated Timer'
      description: 'Update a Repeated Timer by Id'
      parameters:
        - in: path
          name: entityId
          schema:
            type: string
          required: true
          description: String Id of the Repeated Timer
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
      tags:
        - Repeated Timers
    delete:
      summary: 'Delete a Repeated Timer'
      description: 'Delete a Repeated Timer by Id'
      parameters:
        - in: path
          name: entityId
          schema:
            type: string
          required: true
          description: String Id of the timer
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
      tags:
        - Repeated Timers

  /v1/timers/repeated/{systemId}:
    get:
      summary: 'Get all Repeated Timers'
      description: 'Get Repeated Timers from a system'  # TODO: verify if systemId is just for consistency
      tags:
        - Repeated Timers
      parameters:
        - in: path
          name: systemId
          schema:
            type: string
          required: true
          description: String Id of the system
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND

  /v1/fronters/:
    get:
      summary: 'Get current fronters'
      description: 'Get fronters from the currently authenticated system'
      tags:
        - Fronters
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND

  /v1/frontHistory/{systemId}:
    get:
      summary: 'Get Front History from entire system'
      description: 'Get Front History from a system between 2 timestamps'
      tags:
        - Front History
      parameters:
        - in: path
          name: systemId
          schema:
            type: string
          required: true
          description: String Id of the system
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
  /v1/frontHistory/member/{memberId}:
    get:
      summary: 'Get Front History from a single member'
      description: 'Get Front History from a member, optionally between two timestamps'
      tags:
        - Front History
      parameters:
        - in: path
          name: memberId
          schema:
            type: string
          required: true
          description: Member you wish to get the history from
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
  /v1/frontHistory/{systemId}/{entityId}:
    get:
      summary: 'Get a single Front History entry'
      description: 'Get a single Front History document by Id'  # TODO: verify if systemId is just for consistency as front history isn't shared
      tags:
        - Front History
      parameters:
        - in: path
          name: systemId
          schema:
            type: string
          required: true
          description: String Id of the system
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
  /v1/frontHistory/{entityId}:
    post:
      summary: 'Add a Front History entry'
      description: 'Add a Front history entry by (optionally) an Id'
      tags:
        - Front History
      parameters:
        - in: path
          name: entityId
          schema:
            type: string
          required: false
          description: String Id of the document
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
    patch:
      summary: 'Update a Front History entry'
      description: 'Update a Front History entry by an Id'
      tags:
        - Front History
      parameters:
        - in: path
          name: entityId
          schema:
            type: string
          required: true
          description: String Id of the document
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
    delete:
      summary: 'Delete a Front History entry'
      description: 'Delete a Front History Entry by an Id'
      tags:
        - Front History
      parameters:
        - in: path
          name: entityId
          schema:
            type: string
          required: true
          description: String Id of the document
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND

  /v1/user/{userId}:
    get:
      summary: 'Get a user'
      description: 'Get a user by id'
      tags:
        - Users
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: String Id of the user
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
    patch:
      summary: 'Update your own account'
      description: 'Update a user (your own)'
      tags:
        - Users
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: String Id of the user
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
    delete:
      summary: 'Delete your account (app-only)'
      description: 'Delete a user account. (App-only)'  # TODO: verify if JWT endpoints are to be added to API docs.
      tags:
        - Users
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: String Id of the user
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
  /v1/user/username/{userId}:
    patch:
      summary: 'Set username'
      description: 'Set username for user'
      tags:
        - Users
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: String Id of the user
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
  /v1/user/generateReport:
    post:
      summary: 'Generate a user report'
      description: 'Generate a user report for the authenticated user'
      tags:
        - Users
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND

  /v1/friends:
    get:
      summary: 'Get friends'
      description: 'Get friends of the authenticated user'
      tags:
        - Friends
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
  /v1/friends/requests/incoming:
    get:
      summary: 'Get incoming friend requests'
      description: 'Get incoming friend requests of the authenticated user'
      tags:
        - Friends
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
  /v1/friends/requests/outgoing:
    get:
      summary: 'Get outgoing friend requests'
      description: 'Get outgoing friend requests of the authenticated user'
      tags:
        - Friends
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
  /v1/friends/getFrontValues:
    get:
      summary: 'Get fronters (text-format) of all friends'
      description: "Get front values (text-format) of all the authenticated user's friends"
      tags:
        - Friends
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
  /v1/friends/request/add/{username}:
    post:
      summary: 'Add a friend'
      description: "Add a friend by username (or userId)"
      tags:
        - Friends
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
  /v1/friends/request/respond/{username}:
    post:
      summary: 'Respond to a friend request'
      description: "Respond to a friend request by username (or userId)"
      # TODO check and add missing parameter in path
      tags:
        - Friends
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
  /v1/friends/request/{username}:
    delete:
      summary: 'Remove a friend request'
      description: "Remove a friend request"
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: Username (or userId) of the friend request you want to delete
      tags:
        - Friends
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
  /v1/friends/remove/{username}:
    delete:
      summary: 'Remove a friend'
      description: "Remove a friend by username (or userId)"
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: Username (or userId) of the friend you want to delete
      tags:
        - Friends
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND


  /v1/friend/{userId}:
    patch:
      summary: 'Update your settings for a friend'
      description: 'Update your settings for a friend by Id'
      tags:
        - Friend
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: String Id of the friend user account
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
  /v1/friend/{userId}/{friendId}:
    get:
      summary: 'Get a friend from a user'
      description: 'Get a friend from a user (Typically your user)'  # TODO: check if this can even be another user.
      tags:
        - Friend
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: String Id of the origin friend (Typically you)  # TODO: verify if userId is the same as a systemId, but renamed as it can function on non-system accounts too.
        - in: path
          name: friendId
          schema:
            type: string
          required: true
          description: String Id of the destination friend (Typically your friend)
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
  /v1/friend/{userId}/getFront:
    get:
      summary: 'Get the current fronters of a friend'
      description: 'Get the current fronters of a friend'
      tags:
        - Friend
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: String Id of the friend user account
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
  /v1/friend/{userId}/getFrontValue:
    get:
      summary: 'Get current fronters (text-format) of a friend'
      description: 'Get the current fronters (in text form) of a friend'
      tags:
        - Friend
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: String Id of the friend user account
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND

  /v1/integrations/pluralkit/sync/member/{memberId}:
    patch:
      summary: 'Sync a specific member to/from PluralKit'
      description: 'Sync a specific member to or from PluralKit'
      parameters:
        - in: path
          name: memberId
          schema:
            type: string
          required: true
          description: The member id to sync
      tags:
        - PluralKit
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
  /v1/integrations/pluralkit/sync/members:
    get:
      summary: 'Sync all members to/from PluralKit'
      description: 'Sync all system members to or from PluralKit'
      tags:
        - PluralKit
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND

  /v1/avatar/{id}:
    parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Id of the avatar
    post:
      summary: 'Store avatar'
      description: 'Store an avatar with the supplied Id'
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
      tags:
        - Avatars (App-Only)
    delete:
      summary: 'Delete avatar'
      description: 'Delete an avatar with the supplied Id'
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
      tags:
        - Avatars (App-Only)

  /v1/tokens:
    get:
      summary: 'Get all tokens'
      description: 'Get all tokens belonging to the App JWT logged-in user'
      tags:
        - Tokens (App-Only)
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
  /v1/token/{entityId}:
    parameters:
      - in: path
        name: entityId
        schema:
          type: string
        required: true
        description: String Id of the token
    get:
      summary: 'Get a specific token'
      description: 'Get a specific token by id'
      tags:
        - Tokens (App-Only)
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
    post:
      summary: 'Generate a new token'
      description: 'Request the generation of a new token'
      tags:
        - Tokens (App-Only)
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
    delete:
      summary: 'Delete a token'
      description: 'Delete a token by document Id'
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
      tags:
        - Tokens (App-Only)

  /v1/private/{userId}:
    get:
      summary: 'Get the private data of your account'
      description: 'Get the private data of a user'
      tags:
        - Private (App-Only)
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND
    patch:
      summary: 'Update the private data of your account'
      description: 'Update the private data of your user'
      tags:
        - Private (App-Only)
      responses:
        '200':
          description: OK
        '404':
          description: NOT FOUND

components:
  securitySchemes:
    APITokenAuth:  # Authentication with token (as opposed to JWT)
      type: apiKey
      in: header
      name: Authorization  # name of the header used for the token
  schemas:
    MemberModel:
      type: object
      properties:
        name:
          type: string
        desc:
          type: string
        pronouns:
          type: string
        pkId:
          type: string
        color:
          type: string
        avatarUuid:
          type: string
        avatarUrl:
          type: string
        private:
          type: boolean
        preventTrusted:
          type: boolean
        preventsFrontNotifs:
          type: boolean
        info:
          type: object
          description: Collection of custom fields key/value pairs. Keys match the `content.fields` of User model on /v1/user/:id endpoint, with values the value of the field. # TODO edit this with link to other model/API call when specification has been added
          # TODO: add example response?
          # uses OAS 3.0 format for dictionary string-to-string
          additionalProperties:
            type: string
    NoteModel:
      type: object
      properties:
        title:
          type: string
        note:
          type: string
        color:
          type: string
        member:
          type: string
        date:
          type: number